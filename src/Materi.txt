============================================ Class ============================================
##  Membuat Class   ##
Untuk membuat class, kita bisa menggunakan kata kunci class
Penamaan class biasa menggunakan format CamelCase

============================================ Object ============================================
##  Membuat Object   ##
Object adalah hasil instansiasi dari sebuah class
UNtuk membuat object kita bisa menggunakan kata kunci new, dan diikuti dengan nama class dan kurung ()

============================================ Field ============================================
Fields / Properties / Attributes adalah data yang bisa kita sisipkan di dalam Object
Namun sebelum kita bisa memasukkan data di fields, kita harus mendeklarasikan data apa aja yang dimiliki object tersebut di dalam deklarasi class-nya
Membuat field sama seperti membuat variable, namaun ditempatkan di block class

##  Manipulasi Field   ##
Fields yang ada di object, bisa kita manipulasi. Tergantung final atau bukan
Jika final, berarti kita tidak bisa mengubah data fieldnya, namun jika tidak, kita bisa mengubah fieldnya
Untuk memanipulasi data field, sama seperti cara pada variable
Untuk mengakses field, kita butuh kata kunci .(titik) setelah nama object dan diikuti nma fieldsnya

============================================ Method ============================================
Selain menambahkan field, kita juga bisa menambahkan method ke object
Cara dengan mendeklarasikan method tersebut di dalam block class
Sama seperti method biasanya, kita juga bisa menambahkan return value, parameter dan method overloading di method yang ada di dalam block class
Untuk mengakses method tersebut, kita bisa menggunakan tanda titik(.) dan diikuti dengan nama methodnya. Sama seperti mengakses field

============================================ Constructor ============================================
Saat kita membuat Object, maka kita seperti memanggil sebuah method, karena kita menggunakan kurung()
Di dalam class Java, kita bisa membantu constructor adalah method yang akan dipanggil saat pertama kali Object dibuat
Mirip seperti di method, kita bisa memberi parameter pada constructor
Nama constructor harus sama dengan nama class, dan tidak membutuhkan kata kunci void atau rreturn value

============================================ Constructor Overloading ============================================
Sama seperti di method, di constructor kita bisa melakukan overloading
Kita bisa membuat contructor lebih dari satu dengan syarat tipe data parameter harus berbeda, atau jumlah parameter harus berbeda*/

##  Memanggil Constructor lain   ##
Constructor bisa memanggil constructor lain
Hal ini memudahkan saat kita butuh menginisialisasi data dengan berbagai kemungkinan
Cara untuk memeanggil constructor lain, kita hanya perlu memanggilnya seperti memanggil method, namaun dengan kata kunci this*/

============================================ Variable Shadowing ============================================
Varible shadowing adalah kejadian ketika kita membuat nama variable dengan nama yang sama di scope yang menutupi variable dengan nama yang sama di scope diatasnya
Ini bisa terjadi seperti kita membuat nama parameter di method sama dengan nama field di class
Saat terjadi variable shadowing, maka secara otomatis variable scope diatasnya tidak bisa diakses

============================================ This Keyword ============================================
Saat kita membuat kode didalam block contructor atau method di dalam class, kita bisa menggunakan kata kunci this untuk mengakses object saat ini
Misal kadang kita butuh mengakses sebuah field yang namnaya sama dengan parameter method, hal ini tidak bisa dilakukan jika langsung menyebu nama field, kita bisa mengakses nama field tersebut dengan kata kunci this
This juga tidak hanya digunakan untuk mengakses field milik object saat ini, namun juga bisa digunakan untuk mengakses method
This bisa digunakan untuk mengatasi masalah variable shadowing

============================================ Inheritance ============================================
Inheritance atau pewarisan adalah kemampuan untuk menurunkan sebuah class ke class lain
Dalam antrian, kita bisa membuat class parent dan class Child
Class Child, hanya bisa punya satu class parent, namun satu class Parent bisa punya banyak class Child
Saat sebuah class diturunkan, maka semua field dan method yang ada di class Parent, secara otomatis akan dimiliki oleh class Child
Untuk melakukan pewarisan, di class child, kita harus menggunakan kata kunci extends lalu diikuti dengan nama class parent nya

============================================ Method Overriding ============================================
Method overriding adalah kemampuan mendeklarasikan ulang method di child class, yang sudah ada di parent class
Saat kita melakukan proses overriding tersebut, secara otomatis ketika kita membuat object dari class child, method yang di class parent tidak bisa diakses lagi

============================================ Super Keyword ============================================
Kadang kita ingin mengakses method yang terdapat di class parent yang sudah terlanjur kita override di class child
Untuk mengakses method milik class parent kita bisa menggunakan kata kunci super
Sederhananya, super digunakan untuk mengakses class parent
Tidak hanya method, field milik parent class pun bisa kita akses menggunakan kata kunci super

============================================ Super Constructor ============================================
TIdak hanya untuk mengakses method atau field yang ada di parent class, kata kunci super juga bisa digunakan untuk mengakses constructor
Namun syaratnya untuk mengakses parent class constructor, kita harus mengakses didalam class child constructor
JIka sebuah class parent tidak memiliki constructor yang tidak ada parameter-nya(tidak memiliki default constructor), maka class child wajib mengakses constructor class parent tersebut

============================================ Polymorphism ============================================
Polymorphism berasal dari bahasa Yunani yang berarti banyak bentuk
Dalam OOP, Polymorphism adalah kemampuan sebuah object berubah bentuk menjadi bentuk lain
Polymorphism erat hubungannya dengan inheritance

============================================ Type Check & Casts ============================================
Sebelum kita sudah tau cara melakukan konversi tipe data(casts) di tipe data primitif
Casts juga bisa digunakan untuk tipe data bukan primitif
Namun agar aman, sebelum melakukan casts, pastikan kita melakukan type check (pengecekan tipe data), dengan menggunakan kata kunci intanceof
Hasil operator instanceof adalah boolean, true jika data sesuai, false jika tidak sesuai

============================================ Variable Hiding ============================================
Variable hiding merupakan masalah yang terjadi kita membuat nama field sama di class child dengan nama field di class parent
Tidak ada yang namanya field overriding, ketika kita buat ulang nama field di class class, itu berarti variable hiding
Utuk mengatasi variable hiding, caranya kita bisa menggunakan super keyword
Yang membedakan variabel hiding dan method overriding adalah ketika sebuah object di casts
Saat object di casts, method akan tetap mengakses method overriding, namun variable akan mengakses variable yang ada di classnya

============================================ Package ============================================
Saat kita membuat aplikasi, bisa dipastikan kita akan banyak sekali membuat class
Jika class terlalu banyak, kadang akan menyulitkan kita untukk mencari atau mengklarisifikasiakan jenis-jenis class
Java memiliki fitur package, yaitu fitur mirip folder / direktori, dimana kita bisa menyimpan class - class kita di dalam package
Sama seperti folder / direktori, package juga bisa nested, kita bisa menggunakan tanda titik (.) untuk membuat nested package
Ketika kita menyimpan class di dalam package, maka diatas file Java nya, kita wajib menyebutkan nama package nya.

============================================ Access Modifier ============================================
Accces modifier adalah kemampuan membuat class, field, method dan constructor dapat diakses dari mana saja
Sebelumnya temen-temen sudah melihat 2 access modifier, yaitu public dan default(no-modifier)
Sekarang kita akan bahas akses modifier lainnya

## Access Level ##
-------------------------------------------------
Modifier    | Class | Package | Subclass | World
-------------------------------------------------
public      |   Y   |    Y    |     Y    |   Y
protected   |   Y   |    Y    |     Y    |   N
no modifier |   Y   |    Y    |     N    |   N
private     |   Y   |    N    |     N    |   N

## Public Class ##
Saat membuat public class, kita hanya bisa membuat 1 public class 1 file java
Selain itu, nama public class harus sama dengan nama file

============================================ Import ============================================
Import adalah kemampuan untuk menggunakan class ayng berada di package yang berbeda
Syarat class yang bisa digunakan jika packagenya berbeda adalah class yang harus public

## Import Semua Package ##
Jika kita ingin mengimport semua class di dalam sebuah package.
import hanifiamdev.com.data.*

## Default Import ##
Secara default, semua class yang ada di package java.lang sudah auto import, jadi kitqa tidak perlu melakukan import secara manual
Contoh class String, Integer, Long, Boolean, dan lain - lain terdapat package java.lang oleh karena itu, kita tidak perlu meng-import secara manual

============================================ Abstract Class ============================================
Saat kita membuat class, kita bisa menjadikan sebuah class sebagai abstract class
Abstract class artinya, class tersebut tidak bisa dibuat sebagai object secara langsung, hanya bisa diturunkan
Untuk membuat sebuah class menjadi abstract, kita bisa menggunakan kata kunci abstract sebelum kata kunci class
Dengan demikian abstract class bisa kita gunakan sebagai kontrak untuk class child

============================================ Abstract Method ============================================
Saat kita membuat class yang abstract, kita bisa membuat abstract method juga didalam class abstract tersebut
Saat kita membuat sebuah abstract method kita tidak boleh membuat block method untuk method tersebut
Artinya, abstract method wajib di override di class child
Abstract method tidak boleh memiliki access modifier private

============================================ Getter dan Setter ============================================
## Encapsulation ##
Encapsulation artinya data sensitif sebuah object tersembunyi dari akses luar
Hal ini bertujuan agar kita bisa menjaga agar data sebuah object tetap baik daan valid
Untuk mencapai ini, biasanya kita akan membuat semua field menggunakan access modifier private, sehingga tidak bisa diakses atau diubah dari luar
Agar bisa diubah, kita akan menyediakan method untuk mengubah dan mendapatkan field tersebut

## Getter dan Setter ##
Di java, proses encapsulation sudah dibuat standarisasinya, dimana kita bisa menggunakan Getter dan Setter method.
Getter adalah function yang dibuat untuk mengambil data field
Setter ada function untuk mengubah data field

## Getter dan Setter Method ##
---------------------------------------------------
Tipe data  | Getter Method | Setter Method
---------------------------------------------------
boolean    |    isXxx()    | setXxx(boolean value)
primitif   |    getXxx()   | setXxx(primitif value)
Object     |    getXxx()   | setXxx(Object value)

============================================ Interface ============================================
Sebelumnya kita sudah tahu bahwa abstract class bisa kita gunakan sebagai kontrak untuk class childnya
Namun sebenernya yang lebih tepat untuk kontrak adalah interface
Jangan salah bahwa Interface disini bukanlah User Interface
Interface mirip seperti abstract class, yang membedakan adalah di interface, semua method otomatis abstract, tidak memiliki block
Di interface kita tidak boleh memiliki field, kita hanya boleh memiliki constant(field yang tidak bisa diubah)
Untuk mewariskan interface, kita tidak menggunakan kata kunci extends, melainkan implements

============================================ Interface Inheritance ============================================
Sebelumnya kita sudah tahu kalo di java, child class hanya bisa punya 1 class parent
Namun berbeda dengan interface, sebuah child class bisa implement lebih dari 1 interface
Bahkan interface pun bisa implement interface lain, bisa lebih dari 1. namun jika interface ingin mewarisi interface lain, kita menggunakan kata kunci extends, bukan implements

============================================ Default Method ============================================
Sebelumnya kita tahu bahwa di interface, kita tidak bisa membuat method konkrit yang memiliki block method
Namun sejak varsi java 8, ada fitur defult method di interface
Fitur ini terjadi karena sulit untuk maintain kontrak interface jika sudah terlalu banyak class yang implement interface tersebut
Ketika kita menambah satu method di interface, secara otomatis semua class yang implement akan rusak karena harus meng-override method tersebut
Dengan menggunakan default method, kita bisa menambahkan konkrit method di interface

============================================ ToString Method ============================================
toString() adalah method yang terdapat di class Object
Method ini biasanya digunakan untuk merepresentasikan object dalam bentuk String
Secara default, toString() ini akan menghasilkan:
    namaClass + @ + hashCode
Namun kita bisa mengubahnya jika kita mau, agar object yang kita buat lebih mudah dibaca

============================================ Equals Method ============================================
Hal yang agak membingungkan di java adalah, cara membandingkan object
Di bahasa pemrograman lain, untuk mengecek apakah sebuah object sama, biasanya menggunakan operator ==, di Java, operator == hanya untuk mengecek data primitif
Untuk non primitif pengecekan nya menggunakan method equals
Dan secara default, method equals itu akan membandingkan dua buah object secara kesamaan posisi object di memory, artinya jika kita membuat 2 object yang isi fields nya sama, tetap dianggap beda oleh method equals
Oleh karena itu, ada baiknya kita meng-override method equals milik class Object tersebut

============================================ HashCode Method ============================================
Method hashCode adalah method representasi integer object kita, mirip toString yang merupakan representasi String, hashCode adalah representasi integer
HashCode sangat bermanfaat untuk membuat struktur data unique seperti HashMap, Set, dan lain - lain, karena cukup menggunakan hashCode method untuk mendapatkan identitas unique object kita
Secara default hashCode akan mengembalikan nilai integer sesuai data di memory, namun kita bisa mengoverride nya jika kita ingin

## KOntrak HashCode Method ##
Tidak mudah meng-override method hashCode, karena ada kontraknya :
    * Sebanyak apapun hashCode dipanggil, untuk object yang sama, harus menghasilkan data integer yang sama
    * Jika ada 2 object yang sama jika dibandingkan menggunakan method equals, maka nilai hashCodenya juga harus sama
    * Tidak wajib hashCode berbeda jika method equals menghasilkan false, karena memang keterbatasan jumlah integer sekitar 2 milyar

============================================  Final Class ============================================
Sebelumnya kita pernah menggunakan kata kunci final di java
Jika digunakan di variable, maka variable tersebut bisa berubah lagi datanya
Final pun bisa digunakan di class, dimana jika kita menggunakan kata kunci final sebelum class, maka kita menandakan bahwa class tersebut tidak bisa diwariskan lagi
Secara otomatis semua class child nya akan error

============================================  Final Method ============================================
Kata kunci final juga bisa digunakan di Method
Jika sebuah method kita tambahkan kata kunci final, maka artinya method tersebut tidak bisa di override lagi di class child nya
Ini sangat cocok jika kita ingin mengunci implementasi dari sebuah method agar tidak bisa diubah lagi oleh class child nya

============================================  Inner Class ============================================
Di java, kita bisa membuat class di dalam class, atau disebut dengan inner class
Salah satu kasus inner class biasanya ketika kita butuh membuat beberapa class yang saling berhubuungan, dimana sebuah class tidak bisa dibuat tanpa class lain
Misal kita perlu membuat class Employee, dimana membutuhkan class Company, maka kita bisa membuat class Employee sebagai inner class Company
Cara membuat inner class, cukup membuatnya di dalam blok class outer class nya

## Mengakses Outer Class ##
Keuntungan saat kita membuat inner class adalah, kemampuan untuk mengakses outer class nya
Inner class bisa membaca semua private member yang ada di outer class nya
Untuk mengakses object outer class nya, kita bisa menggunakan nama class outer nya diikuti dengan kata kunci this, misal Company.this
Dan untuk mengakses super class outer class nya, kita bisa mengguanakan nama outer nya diikuti dengan kata kunci super, misal Company.super

============================================  Anonymous Class ============================================
Anonymous class atau class tanpa nama adalah kemampuan mendeklarasikan class, sekaligus meng-instansiasi object-nya secara langsung
Anonymous class sebenarnya termasuk inner class, dimana outer class nya adalah tempat dimana kita membuat anonynous class tersebut
Anonymous class sangat cocok ketika kita berhadapan dengan kasus membuat implementasi interface atau abstract class sederhana, tanpa harus membuat implementasi class nya

============================================  Static Keyword ============================================
Sebelumnya kita sudah melihat kata kunci static, namun belum pernah kita bahas
Dengan menggunakan katakunci static, kita bisa membuat field, method atau class bisa diakses langsung tanpa melalui object nya
Perlu diingat, static hanya bisa mengakses static lainnya

## Static Dapat Digunakan di ##
Field, atau disebut class variable, artinya field tersebut bisa diakses langsung tanpa membuat object terlebih dahulu
Method, atau disebut class method, artinya method tersebut bisa diakses langsung tanpa membuat object terlebih dahulu
Block, static block akan otomatis dieksekusi ketika sebuah class di load
Inner Class, artinya inner class tersebut bisa diakses secara langsung tanpa harus membuat object outer class terlebih dahulu. Static pada inner class menyebabkan kita tidak bisa mengakses lagi object outer class nya

============================================  Record Class ============================================

## Java 14 - Experimental ##
Fitur ini masih versi preview dan belum stabil di versi Java 14, namun kita sudah bisa mencobanya
Tapi perlu diingat, bahawa karena fitur ini masih experimental, artinya tidak ada jaminan di versi java mendatang. fitur ini akan tetap ada, bisa saja dihilangkan

## Record Class ##
Kadang kita sering membuat class, hanya untuk class yang berisikan data. Hanya berisi getter, equals, hashCode, dan toString method
Record class digunakan untuk mempermudah pembuatan jenis class tersebut
Saat kita membuat record class, secara otomatis java akan membuat getter, equals, hashCode dan toString method secara otomatis, dan juga constructor secara otomatis
Saat membuat record class, secara otomatis kita meng-extends class java.lang.Record, yang artinya kita tidak bisa extends class lain. Namun kita tetap bisa meng-implement interface

## Record Class Constructor ##
Secara default constructor di record class dibuat secara otomatis, sesuai dengan definisi record class parameter
Namun jika kita ingin melakukan sesuatu di constructor tersebut, kita bisa membuat compact constructor. yaitu constructor tanpa tanda ()
Selain itu, kita juga bisa melakukan constructor overloading, namun ada syaratnya, yaitu constructor overloading nya harus tetap memanggil constructor utama yang secara otomatis dibuatkan di record class

============================================  Enum Class ============================================
Saat kita membuat aplikasi, kadang kita akan bertemu dengan jenis - jenis data yang nilainya terbatas
Misal, gender, ada male dan female, atau tipe customer, ada standard, premium atau vip, dan lain-lain
Dalam kasus seperti ini, kita bisa menggunakan enum class, yaitu class yang berisikan nilai terbatas yang sudah ditentukan
Saat membuat enum class, secara otomatis dia akan meng-extends class java.lang.Enum, oleh karena itu class enum tidak bisa extends class lain, namun masih tetap bisa implements interface.

## Enum Members ##
Sama seperti class biasanya, di class enum pun kita bisa menambahkan members ( field, method dan contructor )
Khusus constructor, kita tidak bisa membuat public constructor, karena memeang tujuan enum bukan untuk di instansi secara bebas

============================================  Exception ============================================
Saat kita membuat aplikasi, kita tidak akan terhindar dengan yang namanya error
Di java, error direpresentasikan dengan istilah exception, dan semua direpresentasikan dalam bentuk class exception
Kita bisa menggunakan class exception sendiri, atau menggunakan yang sudah disediakan oleh java
Jika kita ingin membuat exception, maka kita harus membuat class yang extends class Throwable atau turunan-turunannya

## Membuat Exception ##
Exception biasanya di method, ketika kita membuat exception di sebuah method, maka method tersebut harus ditandai dengan kata kunci thrown diikuti dengan class exception nya.
Jika method tersebut bisa menimbulkan lebih dari satu jenis exception, kita bisa menambah lebih dari satu class exception
Di dalam kode program kita, untuk membuat exception kita cukup menggunakan kata kunci thrown, diikuti dengan object exception nya

## Try Catch ##
Saat kita memanggil sebuah function yang bisa menyebabkan exception, maka kita wajib menggunakan try-catch expression di java
Ini gunanya agar kita bisa menangkap exception yang terjadi, karena jika tidak ditangkap, lalu terjadi exceptionmaka secara otomatis program kita akan berhenti
Cara menggunakan try-catch expression di java sangat mudah, di block try, kita tinggal panggil method yang bisa menyebabkan exception, dan di block catch, kita bisa melakukan sesuatu jika terjadi exception

## Finally Keyword ##
Dalam try-catch, kita bisa menambahkan block finally
Block finally ini adalah block dimana akan selalu dieksekusi baik terjadi exception ataupun tidak
Ini sangat cocok ketika kita ingin melakukan sesuatu, tidak peduli sukses ataupun gagal, misal di block try kita ingin membaca file, di block catch kita akan tangkap jika terjadi error, dan di block finally errro ataupun sukses membaca file, kita wajibmenutup koneksi ke file tersebut, biar tidak menggantung di memory

============================================  Runtime Exception ============================================
Secara garis besar di java exception dibagi menjadi 3 jenis : Checked Exception(Yang  sudah di bahas di materi Exception), Runtime Exception, dan Error

## Apa itu Runtime Exception ##
Runtime exception adalah jenid exception yang tidak wajib di tangkap menggunakan try catch
Kompiler java tidak akan protes walaupun kita tidak menggunakan try catch ketika kita memanggil method yang bisa menyebabkan runtime exception
Untuk membuat class runtime exception, kita wajin mengextends class RuntimeException
Ada banyak di java yang merupakan runtime exception, seperti NullPointerException, IllegalArgumentException, dan lain lain

## Perlu Diperhatikan
Walaupun runtime exception tidak wajib di try-catch, tapi ada baiknya kita tetap melakukan try-catch
karena jika terjadi runtime exception, yang ditakutkan adalah program kita berhenti





