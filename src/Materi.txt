============================================ Class ============================================
##  Membuat Class   ##
Untuk membuat class, kita bisa menggunakan kata kunci class
Penamaan class biasa menggunakan format CamelCase

============================================ Object ============================================
##  Membuat Object   ##
Object adalah hasil instansiasi dari sebuah class
UNtuk membuat object kita bisa menggunakan kata kunci new, dan diikuti dengan nama class dan kurung ()

============================================ Field ============================================
Fields / Properties / Attributes adalah data yang bisa kita sisipkan di dalam Object
Namun sebelum kita bisa memasukkan data di fields, kita harus mendeklarasikan data apa aja yang dimiliki object tersebut di dalam deklarasi class-nya
Membuat field sama seperti membuat variable, namaun ditempatkan di block class

##  Manipulasi Field   ##
Fields yang ada di object, bisa kita manipulasi. Tergantung final atau bukan
Jika final, berarti kita tidak bisa mengubah data fieldnya, namun jika tidak, kita bisa mengubah fieldnya
Untuk memanipulasi data field, sama seperti cara pada variable
Untuk mengakses field, kita butuh kata kunci .(titik) setelah nama object dan diikuti nma fieldsnya

============================================ Method ============================================
Selain menambahkan field, kita juga bisa menambahkan method ke object
Cara dengan mendeklarasikan method tersebut di dalam block class
Sama seperti method biasanya, kita juga bisa menambahkan return value, parameter dan method overloading di method yang ada di dalam block class
Untuk mengakses method tersebut, kita bisa menggunakan tanda titik(.) dan diikuti dengan nama methodnya. Sama seperti mengakses field

============================================ Constructor ============================================
Saat kita membuat Object, maka kita seperti memanggil sebuah method, karena kita menggunakan kurung()
Di dalam class Java, kita bisa membantu constructor adalah method yang akan dipanggil saat pertama kali Object dibuat
Mirip seperti di method, kita bisa memberi parameter pada constructor
Nama constructor harus sama dengan nama class, dan tidak membutuhkan kata kunci void atau rreturn value

============================================ Constructor Overloading ============================================
Sama seperti di method, di constructor kita bisa melakukan overloading
Kita bisa membuat contructor lebih dari satu dengan syarat tipe data parameter harus berbeda, atau jumlah parameter harus berbeda*/

##  Memanggil Constructor lain   ##
Constructor bisa memanggil constructor lain
Hal ini memudahkan saat kita butuh menginisialisasi data dengan berbagai kemungkinan
Cara untuk memeanggil constructor lain, kita hanya perlu memanggilnya seperti memanggil method, namaun dengan kata kunci this*/

============================================ Variable Shadowing ============================================
Varible shadowing adalah kejadian ketika kita membuat nama variable dengan nama yang sama di scope yang menutupi variable dengan nama yang sama di scope diatasnya
Ini bisa terjadi seperti kita membuat nama parameter di method sama dengan nama field di class
Saat terjadi variable shadowing, maka secara otomatis variable scope diatasnya tidak bisa diakses

============================================ This Keyword ============================================
Saat kita membuat kode didalam block contructor atau method di dalam class, kita bisa menggunakan kata kunci this untuk mengakses object saat ini
Misal kadang kita butuh mengakses sebuah field yang namnaya sama dengan parameter method, hal ini tidak bisa dilakukan jika langsung menyebu nama field, kita bisa mengakses nama field tersebut dengan kata kunci this
This juga tidak hanya digunakan untuk mengakses field milik object saat ini, namun juga bisa digunakan untuk mengakses method
This bisa digunakan untuk mengatasi masalah variable shadowing

============================================ Inheritance ============================================
Inheritance atau pewarisan adalah kemampuan untuk menurunkan sebuah class ke class lain
Dalam antrian, kita bisa membuat class parent dan class Child
Class Child, hanya bisa punya satu class parent, namun satu class Parent bisa punya banyak class Child
Saat sebuah class diturunkan, maka semua field dan method yang ada di class Parent, secara otomatis akan dimiliki oleh class Child
Untuk melakukan pewarisan, di class child, kita harus menggunakan kata kunci extends lalu diikuti dengan nama class parent nya

============================================ Method Overriding ============================================
Method overriding adalah kemampuan mendeklarasikan ulang method di child class, yang sudah ada di parent class
Saat kita melakukan proses overriding tersebut, secara otomatis ketika kita membuat object dari class child, method yang di class parent tidak bisa diakses lagi

============================================ Super Keyword ============================================
Kadang kita ingin mengakses method yang terdapat di class parent yang sudah terlanjur kita override di class child
Untuk mengakses method milik class parent kita bisa menggunakan kata kunci super
Sederhananya, super digunakan untuk mengakses class parent
Tidak hanya method, field milik parent class pun bisa kita akses menggunakan kata kunci super

============================================ Super Constructor ============================================
TIdak hanya untuk mengakses method atau field yang ada di parent class, kata kunci super juga bisa digunakan untuk mengakses constructor
Namun syaratnya untuk mengakses parent class constructor, kita harus mengakses didalam class child constructor
JIka sebuah class parent tidak memiliki constructor yang tidak ada parameter-nya(tidak memiliki default constructor), maka class child wajib mengakses constructor class parent tersebut

============================================ Polymorphism ============================================
Polymorphism berasal dari bahasa Yunani yang berarti banyak bentuk
Dalam OOP, Polymorphism adalah kemampuan sebuah object berubah bentuk menjadi bentuk lain
Polymorphism erat hubungannya dengan inheritance

============================================ Type Check & Casts ============================================
Sebelum kita sudah tau cara melakukan konversi tipe data(casts) di tipe data primitif
Casts juga bisa digunakan untuk tipe data bukan primitif
Namun agar aman, sebelum melakukan casts, pastikan kita melakukan type check (pengecekan tipe data), dengan menggunakan kata kunci intanceof
Hasil operator instanceof adalah boolean, true jika data sesuai, false jika tidak sesuai

============================================ Variable Hiding ============================================
Variable hiding merupakan masalah yang terjadi kita membuat nama field sama di class child dengan nama field di class parent
Tidak ada yang namanya field overriding, ketika kita buat ulang nama field di class class, itu berarti variable hiding
Utuk mengatasi variable hiding, caranya kita bisa menggunakan super keyword
Yang membedakan variabel hiding dan method overriding adalah ketika sebuah object di casts
Saat object di casts, method akan tetap mengakses method overriding, namun variable akan mengakses variable yang ada di classnya

============================================ Package ============================================
Saat kita membuat aplikasi, bisa dipastikan kita akan banyak sekali membuat class
Jika class terlalu banyak, kadang akan menyulitkan kita untukk mencari atau mengklarisifikasiakan jenis-jenis class
Java memiliki fitur package, yaitu fitur mirip folder / direktori, dimana kita bisa menyimpan class - class kita di dalam package
Sama seperti folder / direktori, package juga bisa nested, kita bisa menggunakan tanda titik (.) untuk membuat nested package
Ketika kita menyimpan class di dalam package, maka diatas file Java nya, kita wajib menyebutkan nama package nya.

============================================ Access Modifier ============================================
Accces modifier adalah kemampuan membuat class, field, method dan constructor dapat diakses dari mana saja
Sebelumnya temen-temen sudah melihat 2 access modifier, yaitu public dan default(no-modifier)
Sekarang kita akan bahas akses modifier lainnya

## Access Level ##
-------------------------------------------------
Modifier    | Class | Package | Subclass | World
-------------------------------------------------
public      |   Y   |    Y    |     Y    |   Y
protected   |   Y   |    Y    |     Y    |   N
no modifier |   Y   |    Y    |     N    |   N
private     |   Y   |    N    |     N    |   N

## Public Class ##
Saat membuat public class, kita hanya bisa membuat 1 public class 1 file java
Selain itu, nama public class harus sama dengan nama file

============================================ Import ============================================
Import adalah kemampuan untuk menggunakan class ayng berada di package yang berbeda
Syarat class yang bisa digunakan jika packagenya berbeda adalah class yang harus public

## Import Semua Package ##
Jika kita ingin mengimport semua class di dalam sebuah package.
import hanifiamdev.com.data.*

## Default Import ##
Secara default, semua class yang ada di package java.lang sudah auto import, jadi kitqa tidak perlu melakukan import secara manual
Contoh class String, Integer, Long, Boolean, dan lain - lain terdapat package java.lang oleh karena itu, kita tidak perlu meng-import secara manual

============================================ Abstract Class ============================================
Saat kita membuat class, kita bisa menjadikan sebuah class sebagai abstract class
Abstract class artinya, class tersebut tidak bisa dibuat sebagai object secara langsung, hanya bisa diturunkan
Untuk membuat sebuah class menjadi abstract, kita bisa menggunakan kata kunci abstract sebelum kata kunci class
Dengan demikian abstract class bisa kita gunakan sebagai kontrak untuk class child

============================================ Abstract Method ============================================
Saat kita membuat class yang abstract, kita bisa membuat abstract method juga didalam class abstract tersebut
Saat kita membuat sebuah abstract method kita tidak boleh membuat block method untuk method tersebut
Artinya, abstract method wajib di override di class child
Abstract method tidak boleh memiliki access modifier private









