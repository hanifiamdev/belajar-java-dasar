======================================== Pengenalan Collection ========================================
Collection adalah hal umum yang biasa dimiliki di bahasa pemrograman, seperti PHP, Python, Ruby dan lain - lain
Collection atau kadang disebut container, adalah object yang mengumpulkan atau berisikan data - data, mirip seperti Array
Java telah menyediakan class - class collection yang sudah bisa langsung kita gunakan, tanpa tambahan library
Semua class - class collection di Java adalah generic class, sehingga kita bisa menggunakan Java collection dengan data apapun

## Java Collection ##
Java collection telah menyediakan semuanya yang berhubungan dengan collection, sehinggga kita hanya cukup tinggal menggunakannya

    * Interface, ini adalah contract representasi dari collection. Semua collection di Java memiliki kontrak interface, sehingga jika kita mau, kita juga bisa membuat implementasinya sendiri
    * Implementations, tidak perlu khawatir, kita juga bisa menggunakan implementasi yang sudah dibuat oleh Java, semua interface collection sudah ada implementasi class nya di Java collection
    * Algorithms, Java juga sudah menyediakan algoritma - algoritma yang umum digunakan di collection, seperti pencarian dan pengurutan data di collection

======================================== Iterable & Iterator Interface ========================================
## Iterable Interface ##
Iterable adalah parent untuk semua collection di Java, kecuali Map
Iterable sendiri sangat sederhana, hanya digunakan agar mendukung for-each loop
Karena semua collection pasti implement iterable, secara otomatis maka semua collection di Java mendukung perulangan for-each, jadi bukan cuma Array

## Iterator Interface ##
Tidak ada magic di Java, sebenarnya for-each di Iterable bisa terjadi karena ada method iterator() yang mengembalikan object iterator
Iterator adalah interface yang mendefinisikan cara kita melakukan mengakses element di collection secara sequential
For-each sendiri muncul sejak Java 5, sebelum Java 5 untuk melakukan iterasi collection, biasanya dilakukan manual menggunakan Iterator object

======================================== Collection Interface ========================================
Selain Iterable interface, parent class semua collection di Java adalah Collection
Kalo Iterable interface digunakan sebagai kontrak untuk meng-iterasi data secara sequential
Collection merupakan kontrak untuk memanipulasi  data collection, seperti menambah, menghapus, dan mengecek isi data collection
Tidak ada direct implementation untuk Collection, karena collection nanti akan dibagi lagi menjadi List, Set dan Queue

======================================== List Interface========================================
List adalah struktur data collection yang memiliki sifat sebagai berikut
    * Elemen di list bisa duplikat, artinya bisa memasukkan data yang sama
    * Data list berurut sesuai dengan posisi kita memasukkan data
    * List memiliki index, sehingga kita bisa menggunakan nomor index untuk mendapatkan element di list
Di java ada beberapa implementasi List, dan kita bisa memilih sesuai dengan kebutuhan kita

## Implementasi List ##
                                 Iterable
                                     ^
                                     |
                                 Collection
                                     ^
                                     |
                       ArrayList--> List <-- LinkedList


## ArrayList Class ##
ArrayList adalah implementasi dari List menggunakan array
Default kapasitas array di ArrayList adalah 10
Namun ketika kita memasukkan data dan array yang sudah penuh, maka secara otomatis ArrayList akan membuat array baru dengan kapasitas baru dengan ukuran kapasitas lama + data baru

## LinkedList Class ##
LinkedList adalah implementasi List dengan struktur data Double Linked List
Bagi yang sudah belajar tentang struktur data di sekolah / kampus apa itu double linked list

## ArrayList vs LinkedLIst ##
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Operasi     | ArrayList                                                             | LinkedList
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
add         | Cepat jika kapasitasnya Array masih cukup, lamabat jika sudah penuh   | Cepat karena hanya menambah node di akhir
get         | Cepat karena tinggal digunakan index array                            | Lambat karena harus di cek dari node awal sampai ketemu index nya
set         | Cepat karena tinggal gunakan index array                              | Lambat karena harus di cek dari node awal sampai ketemu
remove      | Lambat karena harus menggeser data di belakang yang dihapus           | Cepat karena tinggal ubah prev dan next di node sebelah yang dihapus

======================================== Immutable List ========================================
Secara default, List di Java baik ArrayList ataupun LInkedList datanya bersifat mutable (Bisa diubah)
Di java mendukung pembuatan Immutable List, artinya datanya tidak bisa diubah lagi.
Sekali List dibuat, datanya tidak bisa diubah lagi, alias final
Tapi ingat, data listnya yang tidak bisa diubah, bukan reference object element nya. Kalo misal kita membuat Immutable List berisikan data Person, field data Person tetap bisa diubah, tapi isi elemen dari Immutable List tidak bisa diubah lagi
Ini cocok ketika kasus - kasus misal, tidak sembarangan code yang boleh mengubah element di List

## Membuat Immutable List ##
-----------------------------------------------------------------------------------------
Method                              | Keterangan
-----------------------------------------------------------------------------------------
Collections.emptyList()             | Membuat immutable list kosong
Collections.singletonList(e)        | Membuat immutable list berisi 1 element
Collections.unmodifiableList(list)  | Mengubah mutable list menjadi immutable
List.of(e...)                       | Membuat immutable list dari element - element

======================================== Set Interface ========================================
Set adalah salah satu collection yang berisikan elemen-elemen yang unik, atau tidak boleh duplicate
Set tidak memiliki index seperti di List oleh karena itu tidak ada jaminan data yang ada di Set itu akan terurut sesuai dengan waktu kita memasukkan data ke Set
Set tidak memiliki method baru, jadi hanya menggunakan method yang ada di interface parent nya, yaitu Collection dan Iterable
Karena tidak memiliki index, untuk mengambil data di Set juga kita harus melakukan iterasi satu per satu

## Implementasi Set ##

                                  Iterable
                                     ^
                                     |
                                 Collection
                                     ^
                                     |
                        EnumSet --> Set <-- HashSet <----- LinkedHashSet
                                     ^--------------------------/
## HashSet vs LinkedHashSet ##
Di belakang Hashset dan LinkedHashSet sebenarnya sama - sama ada hash table, dimana data disimpan dalam sebuah hash table dengan mengkalkulasi hashCode() function
Yang membedakan adalah, HashSet tidak menjamin data terurut sesuai dengan waktu kita menambahkan data, sedangkan LinkedHashSet menjamin data terurut sesuai dengan waktu kita menambahkan data
Urutan data di LinkedHashSet bisa dijaga karena di belakang nya menggunakan double linked list

======================================== Immutable Set ========================================
Sama seperti LIst, Set pun memiliki tipe data Immutable
Cara pembuatan immutable Set di Java mirip dengan pembuatan immutable List

## Membuat Immutable Set ##
-----------------------------------------------------------------------------------------
Method                              | Keterangan
-----------------------------------------------------------------------------------------
Collections.empty()                 | Membuat immutable set kosong
Collections.singleton(e)            | Membuat immutable set berisi 1 element
Collections.unmodifiableSet(set)   | Mengubah mutable set menjadi immutable
Set.of(e...)                        | Membuat immutable set dari element - element

======================================== SortedSet Interface ========================================
SortedSet adalah turunan dari Set, namun di SortedSet elemen-elemen yang dimasukkan kedalam SortedSet akan otomatis diurutkan
Jika element adalah turunan dari interface Comparable, maka secara otomatis akan diurutkan menggunakan comparable tersebut
Jika element bukan turunan dari interface Comparable, maka kita bisa menggunakan Comparator untuk memberi tahun si SortedSet bagaimana cara mengurutkan elemen-elemen nya

## Implementasi SortedSet ##
                                   Iterable
                                      ^
                                      |
                                  Collection
                                      ^
                                      |
                                     Set
                                      ^
                                      |
                                  SortedSet
                                      ^
                                      |
                                  NavigableSet
                                      ^
                                      |
                                   TreeSet

## Membuat Immutable SortedSet ##
-----------------------------------------------------------------------------------------
Method                                  | Keterangan
-----------------------------------------------------------------------------------------
Collections.emptySortedSet()            | Membuat immutable sorted set kosong
Collections.unmodifiableSortedSet(set)  | Mengubah mutable sorted set menjadi immutable



